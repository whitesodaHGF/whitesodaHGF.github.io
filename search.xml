<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Leetcode_524.通过删除字母匹配到字典里最长单词</title>
    <url>/whitesodaHGF.github.io/2020/04/28/Leetcode/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B8%93%E9%A2%98/524-%E9%80%9A%E8%BF%87%E5%88%A0%E9%99%A4%E5%AD%97%E6%AF%8D%E5%8C%B9%E9%85%8D%E5%88%B0%E5%AD%97%E5%85%B8%E9%87%8C%E6%9C%80%E9%95%BF%E5%8D%95%E8%AF%8D/</url>
    <content><![CDATA[<p>=&gt; <a href="https://leetcode-cn.com/problems/longest-word-in-dictionary-through-deleting/">Leetcode原题直通车</a></p>
<p>给定一个字符串和一个字符串字典，找到字典里面最长的字符串，该字符串可以通过删除给定字符串的某些字符来得到。如果答案不止一个，返回长度最长且<strong>字典顺序</strong>最小的字符串。如果答案不存在，则返回空字符串。</p>
<p><strong>输入</strong>：s = “abpcplea”, d = [“ale”,”apple”,”monkey”,”plea”]<br><strong>输出</strong>：”apple”</p>
<a id="more"></a>

<h3 id="双指针解法"><a href="#双指针解法" class="headerlink" title="双指针解法"></a>双指针解法</h3><p><strong>思路</strong>：虽然题目提示是删除某些字符来得到最长字符串，但也可以理解为给定的字符串中存在给定数组的某一字符串的所有字符（按顺序，不重复），所以也可以用双指针法来遍历两个字符串，如果字符相等，指针同时+1，如果不相等，指向给定的字符串的指针+1，通过指向数组中的字符串的指针位置来判断给定字符串是否存在所有字符。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findLongestWord</span><span class="params">(String s, List&lt;String&gt; d)</span> </span>&#123;</span><br><span class="line">    String longestWord = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sp = <span class="number">0</span>, dp = <span class="number">0</span>;</span><br><span class="line">        String item = d.get(i);</span><br><span class="line">        <span class="keyword">int</span> l1 = longestWord.length(), l2 = item.length();</span><br><span class="line">        <span class="keyword">while</span> (sp &lt; s.length() &amp;&amp; dp &lt; l2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(sp) == item.charAt(dp)) &#123;</span><br><span class="line">                sp++;</span><br><span class="line">                dp++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sp++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意：字符串长度相同时按照字典顺序排序</span></span><br><span class="line">        <span class="keyword">if</span> (DPointer == l2 &amp;&amp; (l1 &lt; l2 || l1 == l2 &amp;&amp; longestWord.compareTo(item) &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            longestWord = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> longestWord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_345.反转字符串中的元音字母</title>
    <url>/whitesodaHGF.github.io/2020/04/28/Leetcode/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B8%93%E9%A2%98/%E5%AF%B9%E6%92%9E%E6%8C%87%E9%92%88/345-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/</url>
    <content><![CDATA[<p>=&gt; <a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/">Leetcode原题直通车</a></p>
<p>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p>
<blockquote>
<p><strong>输入</strong>: “hello”<br><strong>输出</strong>: “holle”</p>
</blockquote>
<blockquote>
<p><strong>输入</strong>: “leetcode”<br><strong>输出</strong>: “leotcede”</p>
</blockquote>
<a id="more"></a>

<h3 id="双指针解法"><a href="#双指针解法" class="headerlink" title="双指针解法"></a>双指针解法</h3><p><strong>思路</strong>：使用对撞指针法，指针从两端遍历到中间，如果遇到两个指针指向都是元音字母，交换元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> HashSet&lt;Character&gt; vowels = <span class="keyword">new</span> HashSet&lt;&gt;(</span><br><span class="line">        Arrays.asList(<span class="string">'a'</span>, <span class="string">'A'</span>, <span class="string">'e'</span>, <span class="string">'E'</span>, <span class="string">'i'</span>, <span class="string">'I'</span>, <span class="string">'o'</span>, <span class="string">'O'</span>, <span class="string">'u'</span>, <span class="string">'U'</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseVowels</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span>[] result = <span class="keyword">new</span> <span class="keyword">char</span>[s.length()];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">char</span> leftchar = s.charAt(left);</span><br><span class="line">        <span class="keyword">char</span> rightchar = s.charAt(right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (vowels.contains(leftchar) &amp;&amp; !vowels.contains(rightchar)) &#123;</span><br><span class="line">            result[right] = rightchar;</span><br><span class="line">            right--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!vowels.contains(leftchar) &amp;&amp; vowels.contains(rightchar)) &#123;</span><br><span class="line">            result[left] = leftchar;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!vowels.contains(leftchar) &amp;&amp; !vowels.contains(rightchar)</span><br><span class="line">                || vowels.contains(leftchar) &amp;&amp; vowels.contains(rightchar) &amp;&amp; leftchar == rightchar) &#123;</span><br><span class="line">            result[left] = leftchar;</span><br><span class="line">            result[right] = rightchar;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vowels.contains(leftchar) &amp;&amp; vowels.contains(rightchar) &amp;&amp; leftchar != rightchar) &#123;</span><br><span class="line">            result[left] = rightchar;</span><br><span class="line">            result[right] = leftchar;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">        result[left] = s.charAt(left);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
        <tag>对撞指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_234.回文链表</title>
    <url>/whitesodaHGF.github.io/2020/04/28/Leetcode/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B8%93%E9%A2%98/%E5%AF%B9%E6%92%9E%E6%8C%87%E9%92%88/234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>=&gt; <a href="https://leetcode-cn.com/problems/palindrome-linked-list/">Leetcode原题直通车</a></p>
<p>请判断一个链表是否为回文链表。</p>
<blockquote>
<p><strong>输入</strong>: 1-&gt;2<br><strong>输出</strong>: false</p>
</blockquote>
<blockquote>
<p><strong>输入</strong>: 1-&gt;2-&gt;2-&gt;1<br><strong>输出</strong>: true</p>
</blockquote>
<a id="more"></a>

<h3 id="双指针解法"><a href="#双指针解法" class="headerlink" title="双指针解法"></a>双指针解法</h3><p><strong>思路</strong>：复制链表值到数组列表中,使用对撞指针法，判断是否为回文数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//转化为回文数组</span></span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span> (head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(head.val);</span><br><span class="line">            head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查是否是回文数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size()/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(list.get(i).intValue()!=list.get(list.size()-<span class="number">1</span>-i).intValue())</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
        <tag>对撞指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_141.环形链表</title>
    <url>/whitesodaHGF.github.io/2020/04/28/Leetcode/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B8%93%E9%A2%98/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>=&gt; <a href="https://leetcode-cn.com/problems/linked-list-cycle/">Leetcode原题直通车</a></p>
<p>给定一个链表，判断链表中是否有环。</p>
<p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>
<blockquote>
<p><strong>输入</strong>：head = [3,2,0,-4], pos = 1<br><strong>输出</strong>：true<br><strong>解释</strong>：链表中有一个环，其尾部连接到第二个节点。</p>
</blockquote>
<blockquote>
<p><strong>输入</strong>：head = [1,2], pos = 0<br><strong>输出</strong>：true<br><strong>解释</strong>：链表中有一个环，其尾部连接到第一个节点。</p>
</blockquote>
<a id="more"></a>

<h3 id="哈希表解法"><a href="#哈希表解法" class="headerlink" title="哈希表解法"></a>哈希表解法</h3><p><strong>思路</strong>：遍历给定链表，每访问一个结点就把结点放入Set中，利用Set中不存放重复元素的特性，判断如果在遍历过程中，当前结点已经放入Set中，就说明链表中有环。如果可以完成链表的遍历，说明链表中无环。</p>
<p><strong>时间复杂度</strong>：O(n)<br><strong>空间复杂度</strong>：O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;ListNode&gt; set=<span class="keyword">new</span> HashSet&lt;ListNode&gt;();</span><br><span class="line">    <span class="keyword">while</span> (head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(head)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> set.add(head);</span><br><span class="line">        head=head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双指针解法"><a href="#双指针解法" class="headerlink" title="双指针解法"></a>双指针解法</h3><p><strong>思路</strong>：使用具有<strong>不同速度</strong>的快慢指针来遍历链表，当慢指针移动一步时，快指针移动两步。<strong>如果链表中不存在环</strong>，那快指针会先一步到达链表尾部。<strong>如果链表中存在环</strong>，那快慢指针会在某次循环中相遇。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode slow = head;</span><br><span class="line">    ListNode fast = head.next;</span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
        <tag>快慢指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_977.有序数组的平方</title>
    <url>/whitesodaHGF.github.io/2020/04/27/Leetcode/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B8%93%E9%A2%98/977-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</url>
    <content><![CDATA[<p>=&gt; <a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/">Leetcode原题直通车</a></p>
<blockquote>
<p>给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。</p>
</blockquote>
<blockquote>
<p><strong>输入</strong>：[-4,-1,0,3,10]<br><strong>输出</strong>：[0,1,9,16,100]</p>
</blockquote>
<blockquote>
<p><strong>输入</strong>：[-7,-3,2,3,11]<br><strong>输出</strong>：[4,9,9,49,121]</p>
</blockquote>
<a id="more"></a>

<p><strong>思路</strong>：同样是利用数组有序的特征，使用一个指针指向数组头部，一个指针指数组尾部，可以确保两端的数字是正负值中绝对值最大的。然后从两端向中间遍历，同时将运算的结果写在新的数组上</p>
<p><strong>时间复杂度</strong>：O(n)<br><strong>空间复杂度</strong>：O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sortedSquares(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = A.length - <span class="number">1</span>, i = right;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> leftNum = A[left] * A[left], rightNum = A[right] * A[right];</span><br><span class="line">        <span class="keyword">if</span> (leftNum &gt; rightNum) &#123;</span><br><span class="line">            result[i] = leftNum;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i] = rightNum;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_88.合并两个有序数组</title>
    <url>/whitesodaHGF.github.io/2020/04/27/Leetcode/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B8%93%E9%A2%98/88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>=&gt; <a href="https://leetcode-cn.com/problems/merge-sorted-array/">Leetcode原题直通车</a></p>
<blockquote>
<p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p>
<p><strong>输入</strong>:<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3<br><strong>输出</strong>:<br>[1,2,2,3,5,6]</p>
</blockquote>
<a id="more"></a>

<h3 id="数组合并后再排序"><a href="#数组合并后再排序" class="headerlink" title="数组合并后再排序"></a>数组合并后再排序</h3><p><strong>时间复杂度</strong>：O((n+m)log(n+m))<br><strong>空间复杂度</strong>: O(1)</p>
<blockquote>
<p>没有利用到数组是有序的特性，时间复杂度固定(排序使用快速排序，时间复杂度为O(nlogn))</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    System.arraycopy(nums2, <span class="number">0</span>, nums1, m, n);</span><br><span class="line">    Arrays.sort(nums1);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="双指针-归并排序（从小到大）"><a href="#双指针-归并排序（从小到大）" class="headerlink" title="双指针-归并排序（从小到大）"></a>双指针-归并排序（从小到大）</h3><p><strong>时间复杂度：O</strong>(n+m)<br><strong>空间复杂度：O</strong>(m)</p>
<blockquote>
<p>需要把将原来的 nums1数组作为输出，需要另外把原来数组前m个数字放在其他地方，空间复杂度O(m)</p>
</blockquote>
<p><strong>思路</strong>：利用两个数组已经有序且nums1的数组大小为n+m的情况下，可以使用一个指针指向nums1的头部,一个指针指向nums2的头部，还有一个指针指向新数组的头部，进行从小到大的归并排序，需要另外申请空间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> idx1=<span class="number">0</span>,idx2=<span class="number">0</span>,idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] temp=<span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">    System.arraycopy(nums1, <span class="number">0</span>, temp, <span class="number">0</span>, m);</span><br><span class="line">    <span class="keyword">while</span>(idx1&lt;m &amp;&amp; idx2&lt;n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp[idx1]&lt;nums2[idx2])&#123;</span><br><span class="line">            nums1[idx]=temp[idx1];</span><br><span class="line">            idx1++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            nums1[idx]=nums2[idx2];</span><br><span class="line">            idx2++;</span><br><span class="line">        &#125;</span><br><span class="line">        idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(idx1&lt;m)&#123;</span><br><span class="line">        nums1[idx]=temp[idx1];</span><br><span class="line">        idx++;</span><br><span class="line">        idx1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(idx2&lt;n)&#123;</span><br><span class="line">        nums1[idx]=nums2[idx2];</span><br><span class="line">        idx++;</span><br><span class="line">        idx2++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="双指针-归并排序（从大到小）"><a href="#双指针-归并排序（从大到小）" class="headerlink" title="双指针-归并排序（从大到小）"></a>双指针-归并排序（从大到小）</h3><p><strong>时间复杂度：O</strong>(n+m)<br><strong>空间复杂度：O</strong>(1)</p>
<p><strong>思路</strong>：利用两个数组已经有序且nums1的数组大小为n+m的情况下，可以使用一个指针指向nums1的尾部(m-1),一个指针指向nums2的尾部(n-1)，还有一个指针指向nums1的尾部(n+m-1)，进行从大到小的归并排序，且为在nums1上的原地排序，不需要另外申请空间。</p>
<p><img src="/whitesodaHGF.github.io/2020/04/27/Leetcode/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B8%93%E9%A2%98/88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/88-1.png" alt="88-1"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index1 = m - <span class="number">1</span>, index2 = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> indexmerge = m + n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (index1 &gt;= <span class="number">0</span> || index2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[indexmerge--] = nums2[index2--];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[indexmerge--] = nums1[index1--];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[index1] &gt; nums2[index2]) &#123;</span><br><span class="line">            nums1[indexmerge--] = nums1[index1--];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums1[indexmerge--] = nums2[index2--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>双指针专题序</title>
    <url>/whitesodaHGF.github.io/2020/04/27/Leetcode/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B8%93%E9%A2%98/%E5%BA%8F/</url>
    <content><![CDATA[<p><strong>双指针</strong>，指的是在遍历数组的过程中，使用两个方向相同或相反的指针进行扫描的做法。一般在有序数组中使用较多，可以利用数组有序的特性简化一些操作。</p>
<a id="more"></a>

<p><strong>快慢指针</strong>： 使用方向相同但不同步的指针遍历的方法。</p>
<blockquote>
<p>需要确定两个指针的移动策略来解决问题，有时可能需要先对数组进行排序，也可能需要贪心算法来决定你的运动策略。</p>
</blockquote>
<p><strong>对撞指针</strong>： 使用方向相反的指针遍历的方法。</p>
<blockquote>
<p>在数组两头指定头指针和尾指针，从两端到中间迭代数组。遇到有序数组时，应该考虑是否可以用对撞指针来解决。</p>
</blockquote>
<p><strong>当遇到有序数组时，应该优先想到双指针来解决问题，因两个指针的同时遍历会减少空间复杂度和时间复杂度。</strong></p>
]]></content>
      <categories>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_167.两数之和II-输入有序数组</title>
    <url>/whitesodaHGF.github.io/2020/04/27/Leetcode/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B8%93%E9%A2%98/%E5%AF%B9%E6%92%9E%E6%8C%87%E9%92%88/167-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>=&gt; <a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">Leetcode原题直通车</a></p>
<blockquote>
<p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。<br>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p>
<p><strong>输入</strong>: numbers = [2, 7, 11, 15], target = 9<br><strong>输出</strong>: [1,2]</p>
</blockquote>
<a id="more"></a>

<h2 id="直接循环求解"><a href="#直接循环求解" class="headerlink" title="直接循环求解"></a>直接循环求解</h2><p>超出时间限制，失败。<br>不可以直接使用循环的方法求解，算法时间复杂度为O(n<sup>2</sup>)，耗时很久，超出时间限制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">       <span class="keyword">int</span>[] index=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numbers.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;numbers.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(numbers[i]+numbers[j]==target)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">                       index[<span class="number">0</span>]=i+<span class="number">1</span>;</span><br><span class="line">                       index[<span class="number">1</span>]=j+<span class="number">1</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&gt;j)&#123;</span><br><span class="line">                        index[<span class="number">0</span>]=j+<span class="number">1</span>;</span><br><span class="line">                        index[<span class="number">1</span>]=i+<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>思路：因为是有序数组，可以用双指针法，一个指针指向较小的元素，一个指针指向较大的元素，从两端到中间遍历数组。</p>
<ul>
<li>如果 sum == target ，返回两个指针索引；</li>
<li>如果 sum &lt; target ，让左边的指针右移；</li>
<li>如果 sum &gt; target ，让右边的指针左移；</li>
</ul>
</blockquote>
<h2 id="双指针求解"><a href="#双指针求解" class="headerlink" title="双指针求解"></a>双指针求解</h2><p>通过，时间复杂度为O(n)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;     </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = numbers.length - <span class="number">1</span>;     </span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;         </span><br><span class="line">        <span class="keyword">int</span> sum = numbers[i] + numbers[j];         </span><br><span class="line">        <span class="keyword">if</span> (sum == target)  <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i + <span class="number">1</span>, j + <span class="number">1</span>&#125;;         </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target)  i++;         </span><br><span class="line">        <span class="keyword">else</span> j--;         </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
        <tag>对撞指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_26. 删除排序数组中的重复项</title>
    <url>/whitesodaHGF.github.io/2020/03/05/Leetcode/%E5%8F%8C%E6%8C%87%E9%92%88%E4%B8%93%E9%A2%98/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88/26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    <content><![CDATA[<p>=&gt; <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">Leetcode原题直通车</a></p>
<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<a id="more"></a>

<h3 id="自己的解法"><a href="#自己的解法" class="headerlink" title="自己的解法"></a>自己的解法</h3><p>将重复元素首尾记录，移动后续元素消除重复元素。最后数要求是的后一位比前一位大的元素个数。</p>
<p><strong>结果是时间复杂度很糟糕，需要进一步优化。</strong></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span>||nums.length&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length=nums.length,count=<span class="number">0</span>,start=-<span class="number">1</span>,end=-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i-<span class="number">1</span>]!=nums[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(start!=-<span class="number">1</span>&amp;&amp;end!=-<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> gap = end - start;</span><br><span class="line">                    <span class="comment">// 主要需要优化的地方，如何使删除重复元素高效</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt; length - gap; j++)</span><br><span class="line">                        nums[j] = nums[j + gap];</span><br><span class="line">                    i = start;</span><br><span class="line">                    length = length - gap;</span><br><span class="line">                    start = -<span class="number">1</span>; end = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(start==-<span class="number">1</span>&amp;&amp;end==-<span class="number">1</span>)&#123;</span><br><span class="line">                    start=i-<span class="number">1</span>;</span><br><span class="line">                    end=i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> end=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> r;</span><br><span class="line">        <span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;nums.length-<span class="number">1</span>&amp;&amp;nums[r]&lt;nums[r+<span class="number">1</span>];r++);</span><br><span class="line">        count=r+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="双指针法（快慢指针）"><a href="#双指针法（快慢指针）" class="headerlink" title="双指针法（快慢指针）"></a>双指针法（快慢指针）</h3><p>数组完成排序后，我们可以放置两个指针 i 和 j，其中 i 是慢指针，而 j 是快指针。只要 nums[i] = nums[j]，nums[i]=nums[j]，我们就增加 j 以跳过重复项。</p>
<p>代码如下：</p>
<p>用快慢指针的方式，解决了大量的元素移动问题（前提是数组已然有序）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;nums[j])&#123;</span><br><span class="line">                i++;</span><br><span class="line">                nums[i]=nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>双指针</tag>
        <tag>快慢指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_200.岛屿数量</title>
    <url>/whitesodaHGF.github.io/2020/03/05/Leetcode/200-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<p>=&gt; <a href="https://leetcode-cn.com/problems/number-of-islands/">Leetcode原题直通车</a></p>
<p>给定一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。</p>
<a id="more"></a>

<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">11110</span><br><span class="line">11010</span><br><span class="line">11000</span><br><span class="line">00000</span><br><span class="line"></span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line">11000</span><br><span class="line">11000</span><br><span class="line">00100</span><br><span class="line">00011</span><br><span class="line"></span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure>

<h2 id="自己练习的版本-BFS"><a href="#自己练习的版本-BFS" class="headerlink" title="自己练习的版本 BFS"></a>自己练习的版本 BFS</h2><p>思路是：对每一个结点，采用BFS的方法，加入队列，将有相连的点一一置零。但是时间复杂度比较高，对于比较大的二维数组会超时。想起之前数据结构课上做的类似的问题，当时是用递归做的DFS的版本，尝试实现一下。</p>
<p>结果是超时，也难以计算时间复杂度和空间复杂度 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        Queue&lt;point&gt; q=<span class="keyword">new</span> LinkedList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> row=grid.length;</span><br><span class="line">         <span class="keyword">int</span> col=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(row!=<span class="number">0</span>)&#123;</span><br><span class="line">            col=grid[<span class="number">0</span>].length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(row==<span class="number">0</span> || col==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  针对单列或单行网格</span></span><br><span class="line">      <span class="keyword">if</span>(row==<span class="number">1</span>||col==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(row==<span class="number">1</span>&amp;&amp;col==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[<span class="number">0</span>][<span class="number">0</span>]==<span class="string">'1'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(row==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// 出现 '1''0' 时count++</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;col-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[<span class="number">0</span>][i]==<span class="string">'1'</span>&amp;&amp;grid[<span class="number">0</span>][i+<span class="number">1</span>]==<span class="string">'0'</span>)</span><br><span class="line">                        count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(grid[<span class="number">0</span>][col-<span class="number">1</span>]==<span class="string">'1'</span>) count++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[i][<span class="number">0</span>]==<span class="string">'1'</span>&amp;&amp;grid[i+<span class="number">1</span>][<span class="number">0</span>]==<span class="string">'0'</span>)</span><br><span class="line">                        count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(grid[row-<span class="number">1</span>][<span class="number">0</span>]==<span class="string">'1'</span>) count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col;j++)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 判断当前点是否为陆地</span></span><br><span class="line">                    <span class="keyword">if</span>(grid[i][j]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                        q.add(<span class="keyword">new</span> point(i,j));</span><br><span class="line"></span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 广度遍历，将附近相连的陆地都变为0</span></span><br><span class="line">                        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">                                point p=q.remove();</span><br><span class="line">                                <span class="comment">// 检查当前结点的周围结点是否有陆地,将临近点加入队列，删除当前结点</span></span><br><span class="line"></span><br><span class="line">                                <span class="keyword">int</span> a=p.x;</span><br><span class="line">                                <span class="keyword">int</span> b=p.y;</span><br><span class="line"></span><br><span class="line">                                <span class="comment">/* 分为几种情况</span></span><br><span class="line"><span class="comment">                                1-&gt; a=0/row/default</span></span><br><span class="line"><span class="comment">                                2-&gt; b=0/col/default</span></span><br><span class="line"><span class="comment">                                */</span></span><br><span class="line"></span><br><span class="line">                                <span class="comment">// TODO：添加时可能重复，请做检查</span></span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 添加所有临近陆地</span></span><br><span class="line">                                <span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b+<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b+<span class="number">1</span>));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a+<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a+<span class="number">1</span>,b));</span><br><span class="line">                                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b==col-<span class="number">1</span>)&#123;</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b-<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b-<span class="number">1</span>));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a+<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a+<span class="number">1</span>,b));</span><br><span class="line">                                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b-<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b-<span class="number">1</span>));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a+<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a+<span class="number">1</span>,b));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b+<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b+<span class="number">1</span>));</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a==row-<span class="number">1</span>)&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a-<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a-<span class="number">1</span>,b));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b+<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b+<span class="number">1</span>));</span><br><span class="line">                                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b==col-<span class="number">1</span>)&#123;</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a-<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a-<span class="number">1</span>,b));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b-<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b-<span class="number">1</span>));</span><br><span class="line">                                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b-<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b-<span class="number">1</span>));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a-<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a-<span class="number">1</span>,b));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b+<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b+<span class="number">1</span>));</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a-<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a-<span class="number">1</span>,b));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b+<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b+<span class="number">1</span>));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a+<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a+<span class="number">1</span>,b));</span><br><span class="line">                                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b==col-<span class="number">1</span>)&#123;</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a-<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a-<span class="number">1</span>,b));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b-<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b-<span class="number">1</span>));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a+<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a+<span class="number">1</span>,b));</span><br><span class="line">                                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a-<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a-<span class="number">1</span>,b));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a+<span class="number">1</span>][b]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a+<span class="number">1</span>,b));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b-<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b-<span class="number">1</span>));</span><br><span class="line">                                        <span class="keyword">if</span>(grid[a][b+<span class="number">1</span>]==<span class="string">'1'</span>) q.add(<span class="keyword">new</span> point(a,b+<span class="number">1</span>));</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                </span><br><span class="line">                                <span class="comment">// 删除当前陆地</span></span><br><span class="line">                                grid[a][b]=<span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="广度优先搜索（BFS）改进版"><a href="#广度优先搜索（BFS）改进版" class="headerlink" title="广度优先搜索（BFS）改进版"></a>广度优先搜索（BFS）改进版</h2><p>看了官方题解，发现不用存入整个结构体，再迭代扫描，类似的二维数组存入的问题，知道的网格结构的固定大小后，就可以固定row和col，只需要存入相对位置，就可以算出(i,j)。相对于上一次的版本，节省了大量创建新对象并插入队列及遍历队列的时间，大幅度优化了时间复杂度，同时节省了point对象所需要的大量存储空间，大幅度优化了空间复杂度，具体如下：</p>
<p>时间复杂度：O(mxn) 取决于二维数组的大小</p>
<p>空间复杂度:O(min(m,n)) 最坏条件下，即全为陆地的情况下的空间复杂度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid==<span class="keyword">null</span>|grid.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> row=grid.length;</span><br><span class="line">        <span class="keyword">int</span> col=grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    grid[i][j]=<span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line">                    Queue&lt;Integer&gt; neighbors=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                    neighbors.add(i*col+j);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(!neighbors.isEmpty())&#123;</span><br><span class="line">                        <span class="keyword">int</span> id=neighbors.remove();</span><br><span class="line">                        <span class="keyword">int</span> r=id/col;</span><br><span class="line">                        <span class="keyword">int</span> c=id%col;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// A</span></span><br><span class="line">                        <span class="keyword">if</span>(r-<span class="number">1</span>&gt;=<span class="number">0</span>&amp;&amp;grid[r-<span class="number">1</span>][c]==<span class="string">'1'</span>) &#123;</span><br><span class="line">                            neighbors.add((r-<span class="number">1</span>)*col+c);</span><br><span class="line">                            grid[r-<span class="number">1</span>][c]=<span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// &lt;</span></span><br><span class="line">                        <span class="keyword">if</span>(c-<span class="number">1</span>&gt;=<span class="number">0</span>&amp;&amp;grid[r][c-<span class="number">1</span>]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                            neighbors.add(r*col+(c-<span class="number">1</span>));</span><br><span class="line">                            grid[r][c-<span class="number">1</span>]=<span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// &gt;</span></span><br><span class="line">                        <span class="keyword">if</span>(c+<span class="number">1</span>&lt;col&amp;&amp;grid[r][c+<span class="number">1</span>]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                            neighbors.add(r*col+(c+<span class="number">1</span>));</span><br><span class="line">                            grid[r][c+<span class="number">1</span>]=<span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// V</span></span><br><span class="line">                        <span class="keyword">if</span>(r+<span class="number">1</span>&lt;row&amp;&amp;grid[r+<span class="number">1</span>][c]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                            neighbors.add((r+<span class="number">1</span>)*col+c);</span><br><span class="line">                            grid[r+<span class="number">1</span>][c]=<span class="string">'0'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h2 id="深度优先搜素（DFS）"><a href="#深度优先搜素（DFS）" class="headerlink" title="深度优先搜素（DFS）"></a>深度优先搜素（DFS）</h2><p>之前的广度优先搜索需要借助队列来存储待访问的结点，这里的深度优先搜索利用了递归法回溯的特性，可以默认按照顺序扫描访问，但也要注意递归法也十分的消耗资源。</p>
<p>时间复杂度: O(mxn)</p>
<p>空间复杂度：O(mxn),最坏情况下，即全为陆地。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] grid,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row=grid.length;</span><br><span class="line">        <span class="keyword">int</span> col=grid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// A</span></span><br><span class="line">        <span class="keyword">if</span>(i-<span class="number">1</span>&gt;=<span class="number">0</span>&amp;&amp;grid[i-<span class="number">1</span>][j]==<span class="string">'1'</span>)&#123;</span><br><span class="line">            grid[i-<span class="number">1</span>][j]=<span class="string">'0'</span>;</span><br><span class="line">            dfs(grid,i-<span class="number">1</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// V</span></span><br><span class="line">        <span class="keyword">if</span>(i+<span class="number">1</span>&lt;row&amp;&amp;grid[i+<span class="number">1</span>][j]==<span class="string">'1'</span>)&#123;</span><br><span class="line">            grid[i+<span class="number">1</span>][j]=<span class="string">'0'</span>;</span><br><span class="line">            dfs(grid,i+<span class="number">1</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &lt;</span></span><br><span class="line">        <span class="keyword">if</span>(j-<span class="number">1</span>&gt;=<span class="number">0</span>&amp;&amp;grid[i][j-<span class="number">1</span>]==<span class="string">'1'</span>)&#123;</span><br><span class="line">            grid[i][j-<span class="number">1</span>]=<span class="string">'0'</span>;</span><br><span class="line">            dfs(grid,i,j-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// &gt;</span></span><br><span class="line">        <span class="keyword">if</span>(j+<span class="number">1</span>&lt;col&amp;&amp;grid[i][j+<span class="number">1</span>]==<span class="string">'1'</span>)&#123;</span><br><span class="line">            grid[i][j+<span class="number">1</span>]=<span class="string">'0'</span>;</span><br><span class="line">            dfs(grid,i,j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 深度优先搜素</span></span><br><span class="line">        <span class="keyword">if</span>(grid==<span class="keyword">null</span>|grid.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> row=grid.length;</span><br><span class="line">        <span class="keyword">int</span> col=grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    dfs(grid,i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>看了官方的题解，大概类似于遍历一遍图，找出所有的连通分支，然后统计连通分支数量（一个孤立点也是一个连通分支）。</p>
<p>按照这个思路，大概按照图的连通分支算法做一遍，之后再去看题解。</p>
<p>大概看了<a href="https://www.cnblogs.com/MrSaver/p/9607552.html#_label2">并查集的解释</a>后，发现这是一个非常好的算法，易于理解。但相对比较耗费资源。具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="keyword">int</span>[] rank;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> row = grid.length;</span><br><span class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将二维数组压缩为一维</span></span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[row * col];</span><br><span class="line">        rank = <span class="keyword">new</span> <span class="keyword">int</span>[row * col];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对每一个结点都初始化自己为根结点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    parent[i * col + j] = i * col + j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 秩为0,也就是树的高度为零</span></span><br><span class="line">                rank[i * col + j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> uroot = Find(u);</span><br><span class="line">        <span class="keyword">int</span> vroot = Find(v);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uroot == vroot) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(rank[uroot]&gt;rank[vroot])</span><br><span class="line">            parent[vroot]=uroot;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rank[vroot]&gt;rank[uroot])</span><br><span class="line">            parent[uroot]=vroot;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 如果两个连通分支根结点相同且同样高度，将一方作为父结点，其高度加一</span></span><br><span class="line">            parent[vroot]=uroot;</span><br><span class="line">            rank[uroot]++;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (parent[u] != u) &#123;</span><br><span class="line">            parent[u] = parent[parent[u]];</span><br><span class="line">            <span class="comment">// u等于父结点地址</span></span><br><span class="line">            u = parent[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> row = grid.length;</span><br><span class="line">        <span class="keyword">int</span> col = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        UnionFind unionfind=<span class="keyword">new</span> UnionFind(grid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    <span class="comment">// 对附近的连接陆地进行连接</span></span><br><span class="line">                    <span class="keyword">if</span>(i-<span class="number">1</span>&gt;=<span class="number">0</span>&amp;&amp;grid[i-<span class="number">1</span>][j]==<span class="string">'1'</span>)</span><br><span class="line">                        unionfind.Union(i*col+j,(i-<span class="number">1</span>)*col+j);</span><br><span class="line">                    <span class="keyword">if</span>(i+<span class="number">1</span>&lt;row&amp;&amp;grid[i+<span class="number">1</span>][j]==<span class="string">'1'</span>)</span><br><span class="line">                        unionfind.Union(i*col+j,(i+<span class="number">1</span>)*col+j);</span><br><span class="line">                    <span class="keyword">if</span>(j-<span class="number">1</span>&gt;=<span class="number">0</span>&amp;&amp;grid[i][j-<span class="number">1</span>]==<span class="string">'1'</span>)</span><br><span class="line">                        unionfind.Union(i*col+j,i*col+(j-<span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">if</span>(j+<span class="number">1</span>&lt;col&amp;&amp;grid[i][j+<span class="number">1</span>]==<span class="string">'1'</span>)&#123;</span><br><span class="line">                        unionfind.Union(i*col+j,i*col+(j+<span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unionfind.count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="学习到的方法"><a href="#学习到的方法" class="headerlink" title="学习到的方法"></a>学习到的方法</h2><ol>
<li>BFS算法</li>
<li>DFS算法</li>
<li>并查集算法</li>
<li><strong>在二维数组的第二维数组中元素个数固定后（网格），用 i*col+j 的方法代替 存储 (i,j) 样式的结构体（class实现）。可以大大减少创建新对象的资源开支</strong>。</li>
<li>在判断邻居是否连通时，为防止越界加上判断就好，不用对每种情况都分析，要多总结，找到效率较高的方法。</li>
</ol>
]]></content>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>从购置阿里云学生机到开发部署一个SpringBoot+Vue项目全过程</title>
    <url>/whitesodaHGF.github.io/2020/03/05/%E4%BB%8E%E8%B4%AD%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E5%AD%A6%E7%94%9F%E6%9C%BA%E5%88%B0%E5%BC%80%E5%8F%91%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AASpringBoot+Vue%E9%A1%B9%E7%9B%AE%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>如题，本文旨在记录自己从开发到部署一个项目的过程中遇到的问题和解决方案，也可以作为下一次开发部署的参考。因为这个文档是之后写的，可能细节上会有点偏差，欢迎指正。</p>
<h2 id="购置阿里云学生机"><a href="#购置阿里云学生机" class="headerlink" title="购置阿里云学生机"></a>购置阿里云学生机</h2><p><a href="https://promotion.aliyun.com/ntms/act/campus2018.html">阿里云云翼计划</a></p>
<p>这里购买的是阿里云的云服务器ECS（学生优惠购买需要完成认证），相对于轻量应用服务器来说，可操作空间更大，权限更多一些。</p>
<p><img src="https://img-blog.csdnimg.cn/20200105162508352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDM1OTAwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在购买过程中，有需要设置实例登录用户的用户名和密码，用户名默认root就可以，一定要记住密码，后面连接服务器需要用到。</p>
<p>购买之后，可以在阿里云 =&gt;云服务器ecs =&gt; 实例和镜像 =&gt; 实例 中找到自己购买的服务器。</p>
<a id="more"></a>


<p><img src="https://img-blog.csdnimg.cn/20200105162550185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDM1OTAwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>这里的公网地址就是可访问的网址，你在本地ssh连接时用的是这个ip地址，网站部署好后访问也是这个网址。</p>
<h2 id="服务器初始配置"><a href="#服务器初始配置" class="headerlink" title="服务器初始配置"></a>服务器初始配置</h2><p>本地（Win10）连接服务器建议使用<a href="https://www.netsarang.com/zh/free-for-home-school/">Xshell</a>（家庭与教育版免费），上传下载文件都比较方便，也可使用<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/">PuTTY</a>（SSH客户端）+<a href="https://winscp.net/eng/download.php">WinSCP</a>（上传下载文件）。这里使用Xshell做示例。</p>
<h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><p>打开Xshell</p>
<ol>
<li>点击 文件 =&gt; 新建 ，填写上述实例的公网ip地址</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200105162831101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDM1OTAwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2. 点击用户身份验证，填写登录用户的用户名和密码，这里的用户名和密码就是你购买服务器时设置的。<br><img src="https://img-blog.csdnimg.cn/20200105162633820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDM1OTAwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4. 点击确认，初次登录会弹出提示你保存ssh密钥的提醒框，选择保存就好了。</p>
<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>连接成功后，需要先更新一下软件源，然后安装mysql。</p>
<h4 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h4><p>通过安装过程，将被要求为MySQL服务器的<strong>root</strong>用户输入密码，重新输入密码以确认并按<strong>[Enter]</strong> 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install mysql-server mysql-client;</span><br></pre></td></tr></table></figure>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly93d3cuaG93dG9pbmcuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE4LzA1L1NldC1NeVNRTC1Sb290LVBhc3N3b3JkLnBuZw?x-oss-process=image/format,png" alt="è®¾ç½®MySQLæ ¹å¯ç "></p>
<p>本地访问mysql测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p****(****是安装时你设置的root密码)</span><br></pre></td></tr></table></figure>

<h4 id="配置Mysql远程连接"><a href="#配置Mysql远程连接" class="headerlink" title="配置Mysql远程连接"></a>配置Mysql远程连接</h4><p>参考<a href="https://blog.csdn.net/u010429286/article/details/82263293">BOLG</a></p>
<ol>
<li><p>mysql默认是只允许本地主机访问127.0.0.1，并关闭了远程连接，所以安装之后需要打开远程连接，并修改配置允许其他ip访问。</p>
<ul>
<li><strong>MySQL取消限制</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p****</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '密码' WITH GRANT OPTION; </span><br><span class="line"><span class="meta">#</span><span class="bash"> % 表示MySQL允许在任何IP连接当前实例</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修改Mysql配置</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/mysql/mysql.conf.d/</span><br><span class="line">sudo vim mysqld.cnf</span><br></pre></td></tr></table></figure>

<p>注释掉 <code>bind-address = 127.0.0.1</code> 这一行。使得任何一个ip都可以连接Mysql服务。</p>
</li>
</ol>
<ol start="2">
<li><p>需要在阿里云服务台开放相应端口</p>
<p>阿里云的服务器设置了安全组规则来限制ecs服务器的ip,端口访问策略。因此需要修改。</p>
<p>登录阿里云 =&gt; 网络与安全 =&gt; 安全组 </p>
<p><img src="https://img-blog.csdnimg.cn/2020010516290162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDM1OTAwMQ==,size_16,color_FFFFFF,t_70" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Yeb1vGaq-1578212674024)(C:\Users\WHITE\AppData\Roaming\Typora\typora-user-images\image-20200105145343198.png)\]"><br>​        在安全组规则里面，添加安全组规则。</p>
</li>
</ol>
<p>​        端口范围选择 3306,</p>
<p>​        授权对象设置为0.0.0.0/0 允许所有ip访问<br><img src="https://img-blog.csdnimg.cn/20200105162922600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDM1OTAwMQ==,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;C:\Users\WHITE\AppData\Roaming\Typora\typora-user-images\image-20200105145620320.png&quot; alt=&quot;image-20200105145620320&quot; style=&quot;zoom: 67%;&quot; /&gt;"></p>
<h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p>参考<a href="https://blog.csdn.net/zbj18314469395/article/details/86064849">BLOG</a></p>
<h2 id="后端Springboot项目打包"><a href="#后端Springboot项目打包" class="headerlink" title="后端Springboot项目打包"></a>后端Springboot项目打包</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ol>
<li>确定项目中使用的接口在服务器上没有被占用。</li>
<li>将连接的本地数据库换成服务器ip地址。</li>
<li>在阿里云安全组规则中添加项目使用的端口。</li>
<li>确定项目使用 jdk1.8 版本 </li>
</ol>
<h3 id="单项目打包"><a href="#单项目打包" class="headerlink" title="单项目打包"></a>单项目打包</h3><p>参考 <a href="https://blog.csdn.net/qq_34975710/article/details/83989642">BLOG1</a> <a href="http://www.ityouknow.com/springboot/2017/05/09/spring-boot-deploy.html">BLOG2</a></p>
<h4 id="打包jar"><a href="#打包jar" class="headerlink" title="打包jar"></a>打包jar</h4><p>​    打包分为两种，一是打包成war包使用tomcat服务器运行，二是打包成jar包直接执行。由于项目使用Springboot，其中内置了tomcat。所以直接打成jar包运行比较方便。</p>
<p>​    在项目目录中执行以下命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 项目跟目录（和pom.xml同级）</span><br><span class="line">mvn clean package</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 或者执行下面的命令</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 排除测试代码后进行打包</span></span></span><br><span class="line">mvn clean package  -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<p>​    打包完成后 jar 包会生成到 target 目录下，命名一般是 项目名+版本号.jar</p>
<p>​    <strong>启动 jar 包命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar  target&#x2F;spring-boot-scheduler-1.0.0.jar</span><br></pre></td></tr></table></figure>

<p>​    这种方式，只要控制台关闭，服务就不能访问了。下面我们使用在<strong>后台运行</strong>的方式来启动:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup java -jar target&#x2F;spring-boot-scheduler-1.0.0.jar &amp;</span><br></pre></td></tr></table></figure>

<p>​    也可以在启动的时候选择<strong>读取不同的配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar app.jar --spring.profiles.active&#x3D;dev</span><br></pre></td></tr></table></figure>

<h3 id="多模块打包"><a href="#多模块打包" class="headerlink" title="多模块打包"></a>多模块打包</h3><p>这一我有尝试过，但是因为依赖关系的问题，子模块一直打包失败。需要再尝试一下。</p>
<p>参考 <a href="https://blog.csdn.net/baidu_41885330/article/details/81875395">BLOG</a></p>
<h2 id="前端Vue-Element项目打包"><a href="#前端Vue-Element项目打包" class="headerlink" title="前端Vue+Element项目打包"></a>前端Vue+Element项目打包</h2><ol>
<li><p>前期准备</p>
<p>修改本地地址为服务器ip地址</p>
</li>
<li><p>打包项目为静态文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>打包完成后可以在 <code>/static</code> 文件夹下找到 <code>/dist</code> 文件夹</p>
<h2 id="普通部署"><a href="#普通部署" class="headerlink" title="普通部署"></a>普通部署</h2><p>把所需的文件上传到服务器上</p>
<p>Xshell 方式 </p>
<p>上传（本机 =&gt; 服务器）指令为: <code>rz</code></p>
<p>下载（服务器 =&gt; 本机）指令为: <code>sz</code></p>
<h3 id="运行后端项目"><a href="#运行后端项目" class="headerlink" title="运行后端项目"></a>运行后端项目</h3><p>可直接输入以下命令指定项目在对应端口在<strong>后台执行</strong> ,</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --server.port=8090指定端口</span></span><br><span class="line">nohup java -jar xxx.jar --server.port=8090 &amp;</span><br></pre></td></tr></table></figure>

<p>同时相应的日志会默认输出到nohup.out中，可以查看该文件来查看相应的log。</p>
<h3 id="部署前端项目"><a href="#部署前端项目" class="headerlink" title="部署前端项目"></a>部署前端项目</h3><ol>
<li><p>docker中拉取nginx 镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建dockerfile文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">COPY lab4_fronted/ /usr/share/nginx/html/</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建vue应用镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -t 是给镜像命名 . 是基于当前目录的Dockerfile来构建镜像</span></span><br><span class="line">docker build -t lab4_fronted .</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mini -p 8080:8080 lab4_fronted</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入容器修改nginx配置做代理转发</p>
<p>待写</p>
</li>
</ol>
<h3 id="部署后端项目"><a href="#部署后端项目" class="headerlink" title="部署后端项目"></a>部署后端项目</h3><h4 id="1-直接部署"><a href="#1-直接部署" class="headerlink" title="1.直接部署"></a>1.直接部署</h4><ol>
<li>在项目目录下面的target文件夹，把编译好的jar包传到服务器上</li>
<li>运行：<code>java -jar mini-app-0.0.1-SNAPSHOT.jar</code><ol start="3">
<li>可以使用–参数名=值来实现运行时的配置，<code>eg：--spring.profiles.active=prod</code>，指定生产环境的配置文件</li>
</ol>
</li>
</ol>
<h4 id="2-容器部署"><a href="#2-容器部署" class="headerlink" title="2.容器部署"></a>2.容器部署</h4><ol>
<li><p>在项目目录下创建Dockerfile文件。指定基础镜像为java8，复制jar包进去，配置执行的命令。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">COPY target/mini-app-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="line"></span><br><span class="line">ENTRYPOINT ["java", "-jar", "/app.jar"]</span><br></pre></td></tr></table></figure>
</li>
<li><p>在命令行中进入项目目录，执行构建镜像命令</p>
<p>   <code>docker build -t mini-app:1.0 .</code></p>
<p>   <code>-t指定镜像名称</code></p>
<p>   最后不能漏掉一点，否则出错</p>
</li>
<li><p>构建成功后创建容器</p>
<p>   <code>docker run --name mini -p 8081:8081 mini-app:1.0</code></p>
<p>   <code>--name指定容器名称</code></p>
<p>   <code>-p指定端口映射</code></p>
</li>
<li><p>容器创建成功后默认启动，下面是停止和启动容器命令</p>
<p>   <code>docker stop mini</code></p>
<p>   <code>docker start mini</code></p>
</li>
<li><p>查看运行日志</p>
<p>   <code>docker logs mini</code></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Springboot</tag>
        <tag>Vue</tag>
        <tag>Linux</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
</search>
